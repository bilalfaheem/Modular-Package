   import 'package:service/domain/repository/{{module.snakeCase()}}/{{name.snakeCase()}}_repo.dart';
  import 'package:service/data/rest_api/{{name.snakeCase()}}_rest_api_repo.dart';
import 'package:service/domain/validator/{{name.snakeCase()}}_validator.dart';
import 'package:service/domain/usecase/{{name.snakeCase()}}_use_case.dart';
import 'package:service/view_model/{{name.snakeCase()}}_view_model.dart';



// <<<<<<<<<<<<<<<<<<<<<<<  {{name.pascalCase()}} ViewModel >>>>>>>>>>>>>>>>>>>>>>>
import 'package:service/data/model/{{name.snakeCase()}}_data_model/{{name.snakeCase()}}_data_model.dart';


ApiResponse<{{name.pascalCase()}}DataModel> {{name.camelCase()}}Response = ApiResponse.init();

  set{{name.pascalCase()}}Response(ApiResponse<{{name.pascalCase()}}DataModel> response) {
    {{name.camelCase()}}Response = response;
    update();
  }

  {{name.camelCase()}}() {
    set{{name.pascalCase()}}Response(ApiResponse.loading());
    _useCase.{{name.camelCase()}}execute().then((value) => value.fold((err) {
          set{{name.pascalCase()}}Response(ApiResponse.error(err.error));
          Utils.logError(err.error.toString(), name: "{{name.pascalCase()}} Repo Error");
        }, (res) {
          set{{name.pascalCase()}}Response(ApiResponse.completed(res));
        }));
  }

// <<<<<<<<<<<<<<<<<<<<<<<  {{name.pascalCase()}}Repo  >>>>>>>>>>>>>>>>>>>>>>>

import 'package:fpdart/fpdart.dart';
import 'package:service/data/header.dart/header.dart';
import 'package:service/data/model/{{name.snakeCase()}}_data_model/{{name.snakeCase()}}_data_model.dart';
import 'package:service/data/network/network.dart';
import 'package:service/data/url/app_url.dart';
import 'package:service/domain/failures/repo_failure.dart';
import 'package:service/domain/store/user_store.dart';


  Future<Either<RepoFailure, {{name.pascalCase()}}DataModel>> {{name.camelCase()}}(Map<String, dynamic> data){}



// <<<<<<<<<<<<<<<<<<<<<<<  {{name.pascalCase()}}RestApiRepo  >>>>>>>>>>>>>>>>>>>>>>>

import 'package:fpdart/fpdart.dart';
import 'package:service/data/header.dart/header.dart';
import 'package:service/data/model/{{name.snakeCase()}}_data_model/{{name.snakeCase()}}_data_model.dart';
import 'package:service/data/network/network.dart';
import 'package:service/data/url/app_url.dart';
import 'package:service/domain/failures/repo_failure.dart';
import 'package:service/domain/store/user_store.dart';
 import 'package:service/domain/repository/{{module.snakeCase()}}/{{name.snakeCase()}}_repo.dart';


  Future<Either<RepoFailure, {{name.pascalCase()}}DataModel>> {{name.camelCase()}}(Map<String, dynamic> data) =>
      network
            .post(
            AppUrls.{{name.camelCase()}}Url,
            data,
            Header.bearerHeaderWithApplicationJson(
                UserStore.JWT.toString()),
          )
          .then((value) =>
              value.fold((l) => left(RepoFailure(error: l.error)), (response) {
                 try {
                  return  right({{name.pascalCase()}}DataModel.fromJson(response));
                } catch (e) {
                  return left(RepoFailure(error: e.toString()));
                }
              }));



// <<<<<<<<<<<<<<<<<<<<<<<  {{name.pascalCase()}}usecase  >>>>>>>>>>>>>>>>>>>>>>>

import 'package:fpdart/fpdart.dart';
import 'package:service/data/model/{{name.snakeCase()}}_data_model/{{name.snakeCase()}}_data_model.dart';
import 'package:service/domain/entities/{{module.snakeCase()}}/{{name.snakeCase()}}_entity.dart';
import 'package:service/domain/failures/{{module.snakeCase()}}/{{name.snakeCase()}}_failure.dart';
import 'package:service/domain/validator/{{module.snakeCase()}}/{{name.snakeCase()}}_validator.dart';

class {{name.pascalCase()}}UseCase {
  final {{name.pascalCase()}}Repo _repo;
  final {{name.pascalCase()}}Validator _validator;
  {{name.pascalCase()}}UseCase(this._repo, this._validator);

  Future<Either<{{name.pascalCase()}}Failure, {{name.pascalCase()}}DataModel>> {{name.camelCase()}}execute({{name.pascalCase()}}Entity data) async =>
      _validator.validate(data).fold(
          (err) => left({{name.pascalCase()}}Failure(error: err.error)),
          (data) async => await _repo.{{name.camelCase()}}(data).then((value) => value.fold(
              (err) => left({{name.pascalCase()}}Failure(error: err.error)),
              (response) => right(response))));
}

// <<<<<<<<<<<<<<<<<<<<<<<  {{name.pascalCase()}}Validator  >>>>>>>>>>>>>>>>>>>>>>>


import 'package:fpdart/fpdart.dart';
import 'package:service/domain/entities/{{name.snakeCase()}}_entity.dart';
import 'package:service/domain/failures/validation_failure.dart';
import 'package:service/domain/validator/validator.dart';

class {{name.pascalCase()}}Validator {
  Either<ValidationFailure, Map<String, dynamic>> validate( {{name.pascalCase()}}Entity data) {
    if (Validator.validateEmail(data.email) != null) {
      return left(
          ValidationFailure(error: Validator.validateEmail(data.email)!));
    } 
     else {
      return right(data);
    }
  }
}
